#! /bin/bash -l

set -x

pipeuser=PIPEUSER
obsnum=OBSNUM

# If obsnum is a file, then we are in an array job
if [[ -f "${obsnum}" ]]
then
    taskid="${SLURM_ARRAY_TASK_ID}"
    jobid="${SLURM_ARRAY_JOB_ID}"

    echo "obsfile ${obsnum}"
    obsnum=$(sed -n -e "${SLURM_ARRAY_TASK_ID}"p "${obsnum}")
    echo "image obsid ${obsnum}"
else
    taskid=1
    jobid="${SLURM_JOB_ID}"
fi

echo "jobid: ${jobid}"
echo "taskid: ${taskid}"

function test_fail {
if [[ $1 != 0 ]]
then
    track_task.py fail --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"
    exit "$1"
fi
}

# Set version number
base=BASEDIR
debug=DEBUG

# WSClean suffixes for subchannels and MFS
subchans="MFS 0000 0001 0002 0003"
# S/N Level at which to choose masked pixels for deepclean
msigma=1
# S/N Threshold at which to stop cleaning
tsigma=1

# Update database
cd "${base}" || exit
track_task.py start --jobid="${jobid}" --taskid="${taskid}" --start_time="$(date +%s)"

datadir="${base}/${obsnum}"
cd "${datadir}" || exit
mkdir -p /tmp/${SLURM_JOB_ID}/slurm_wsclean
cp -rf ${obsnum}.ms /tmp/${SLURM_JOB_ID}/slurm_wsclean

# Adding a check to see if there are any selfsolutions already, will not recalculated
if [[ -e ${obsnum}_selfsolutions.bin ]] || [[ -e ${obsnum}_selfsolutions_failed.bin ]]
then 
    echo "There is already a selfsolutions file?? Check what you want to do first, but i am exiting without doing anything!!! "
    exit 1
fi 


# Which data column to image
if [[ ! -z $debug ]]
then
    taql update /tmp/${SLURM_JOB_ID}/slurm_wsclean/${obsnum}.ms set DATA=CORRECTED_DATA
fi
# Removing any previous model column to make sure its not accidentally included in the model for selfcal
taql alter table /tmp/${SLURM_JOB_ID}/slurm_wsclean/${obsnum}.ms drop column MODEL_DATA 

# TODO: replace with find
metafits="$(ls -t ${obsnum}*metafits* | head -1)"

# Checking if there is a gross sidelobe: 
if [[ ! -e "${obsnum}_beamlobes.txt" ]]
then
    get_mwa_pb_lobes.py ${metafits} -mS > ${obsnum}_beamlobes.txt
else
    echo "Already have the beam, not recalculating"
fi 


if [[ $(cat ${obsnum}_beamlobes.txt | wc -l ) -eq 1 ]]
then 
    ra_sidelobe=$(cat ${obsnum}_beamlobes.txt | awk '{print $2}')
    dec_sidelobe=$(cat ${obsnum}_beamlobes.txt | awk '{print $3}')
else
    echo "No major sidelobe, good stuff"
    self="False"
fi 

get_mwa_pb_lobes.py ${metafits} -mM > ${obsnum}_mainlobes.txt
ra_mainlobe=$(cat ${obsnum}_mainlobes.txt | awk '{print $2}')
dec_mainlobe=$(cat ${obsnum}_mainlobes.txt | awk '{print $3}')

# Check if any a-team source is in the main fov
ateam_fov=$(check_src_fov.py -p ${ra_mainlobe} ${dec_mainlobe})
# crab_fov=$(check_src_fov.py -p ${ra_mainlobe} ${dec_mainlobe} -s "Crab")
# cyga_fov=$(check_src_fov.py -p ${ra_mainlobe} ${dec_mainlobe} -s "CygA")
if [[ "$ateam_fov" == "False" ]]
then
    echo "There is neither Crab nor CygA in the fov or sidelobe, no self cal needed!"
    self2="False"
else
    echo "Something bright in the main fov, going to do self-cal"
fi 

if [[ "$self" == "False" ]] && [[ "${self2}" == "False" ]]
then 
    echo "There is no need to do selfcal here!"
    exit 0
else
    echo "Either there is a gross sidelobe or Crab/CygA is in the mainlobe, carrying on with selfcal"
fi 

# Set up telescope-configuration-dependent options
if [[ $obsnum -lt 1151402936 ]] ; then
    telescope="MWA128T"
    basescale=1.1
    imsize=4000
    robust=-1.0
elif [[ $obsnum -ge 1151402936 ]] && [[ $obsnum -lt 1191580576 ]] ; then
    telescope="MWAHEX"
    basescale=2.0
    imsize=2000
    robust=-2.0
elif [[ $obsnum -ge 1191580576 ]] ; then
    telescope="MWALB"
    basescale=0.6
    imsize=8000
    robust=0.5
fi

# Set up channel-dependent options
chan="$(pyhead.py -p CENTCHAN ${metafits} | awk '{print $3}')"
bandwidth="$(pyhead.py -p BANDWDTH ${metafits} | awk '{print $3}')"
centfreq="$(pyhead.py -p FREQCENT ${metafits} | awk '{print $3}')"
chans="$(pyhead.py -p CHANNELS ${metafits} | awk '{print $3}' | sed 's/,/ /g')"
chans=($chans)

# Pixel scale
 # At least 4 pix per synth beam for each channel
scale=$(echo "$basescale / $chan" | bc -l)

# Naming convention for output files
lowfreq=$(echo "${centfreq}" "${bandwidth}" | awk '{printf("%00d\n",$1-($2/2.)+0.5)}')
highfreq=$(echo "$centfreq $bandwidth" | awk '{printf("%00d\n",$1+($2/2.)+0.5)}')
freqrange="${lowfreq}-${highfreq}"

# Calculate min uvw in metres
minuv=75
minuvm=$(echo "234 * $minuv / $chan" | bc -l)
# In wavelengths, maximum 128T baseline at 200MHz was 1667 lambda long
# 300/1.28 * 1667 = 390000
# Calculate max uvw in metres
maxuvm=$(echo "390000 / (${chan} + 11)" | bc -l)

# Found that multiscale cleaning recovers flux density in the extragalactic sky better than not, and doesn't add much to processing time
multiscale="-multiscale -mgain 0.85 -multiscale-gain 0.15"

# Initial shallow clean to populate the model column 
# Set the pipefail so the test_fail does not test for tee
set -o pipefail
# shallow clean (for selfcal) 
if [[ ! -e "${obsnum}_initial-MFS-XX-image.fits" ]]
then
    wsclean \
            -abs-mem ${GXMEMORY} \
            $multiscale \
            -temp-dir /tmp/${SLURM_JOB_ID}/slurm_wsclean/ \
            -nmiter 1 \
            -niter 40000 \
            -stop-negative \
            -name ${obsnum}_initial \
            -size ${imsize} ${imsize} \
            -scale ${scale:0:8} \
            -weight briggs ${robust} \
            -pol XX,YY,XY,YX \
            -channels-out 4 \
            -join-polarizations \
            "/tmp/${SLURM_JOB_ID}/slurm_wsclean/${obsnum}.ms" | tee wsclean.log
    
else
    echo "Already have initial images, not reimaging shallow clean"
fi 


# Check if it made initial images 
if [[ ! -e "${obsnum}_initial-MFS-XX-image.fits" ]]
then
    echo 'Initial image did not generate! Something probs happened with WSClean'
    exit 1
else
    rm -rf ${obsnum}.ms && cp -rf /tmp/${SLURM_JOB_ID}/slurm_wsclean/${obsnum}.ms ./
    calibrate \
            -j ${GXNCPUS} \
            -absmem ${GXABSMEMORY} \
            -minuv ${minuvm} \
            -maxuv ${maxuvm} \
            -datacolumn DATA \
            "${obsnum}.ms" \
            "${obsnum}_selfsolutions.bin" | tee calibrate.log 

    aocal_plot.py --refant=127 ${obsnum}_selfsolutions.bin 
    result=$(check_assign_solutions.py -t "0.25" check "${obsnum}_selfsolutions.bin")
fi 


if echo "${result}" | grep -q fail
then
    mv "${obsnum}_selfsolutions.bin" "${obsnum}_selfsolutions_failed.bin"
    echo "FAILED SELF CAL!"
    exit 1
fi



# clean up all unnecessary images

rm "${obsnum}_initial*.fits"

track_task.py finish --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"