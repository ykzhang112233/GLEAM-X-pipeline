#! /bin/bash -l

set -x

pipeuser=PIPEUSER
obsnum=OBSNUM

# If obsnum is a file, then we are in an array job
if [[ -f "${obsnum}" ]]
then
    taskid="${SLURM_ARRAY_TASK_ID}"
    jobid="${SLURM_ARRAY_JOB_ID}"

    echo "obsfile ${obsnum}"
    obsnum=$(sed -n -e "${SLURM_ARRAY_TASK_ID}"p "${obsnum}")
    echo "image obsid ${obsnum}"
else
    taskid=1
    jobid="${SLURM_JOB_ID}"
fi

echo "jobid: ${jobid}"
echo "taskid: ${taskid}"

function test_fail {
if [[ $1 != 0 ]]
then
    track_task.py fail --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"
    exit "$1"
fi
}

# Set version number
base=BASEDIR
debug=DEBUG
# Which data column to image
if [[ ! -z $debug ]]
then
    datacolumn="CORRECTED_DATA"
else
    datacolumn="DATA"
fi

# WSClean suffixes for subchannels and MFS
subchans="MFS 0000 0001 0002 0003"
# S/N Level at which to choose masked pixels for deepclean
msigma=1
# S/N Threshold at which to stop cleaning
tsigma=1

# Update database
cd "${base}" || exit
track_task.py start --jobid="${jobid}" --taskid="${taskid}" --start_time="$(date +%s)"

datadir="${base}/${obsnum}"
cd "${datadir}" || exit

mkdir -p /tmp/slurm_wsclean/${SLURM_JOB_ID}
cp -rf ${obsnum}.ms /tmp/slurm_wsclean/${SLURM_JOB_ID}/


# TODO: replace with find
metafits="$(ls -t ${obsnum}*metafits* | head -1)"

# Set up telescope-configuration-dependent options
if [[ $obsnum -lt 1151402936 ]] ; then
    telescope="MWA128T"
    basescale=1.1
    imsize=4000
    robust=-1.0
elif [[ $obsnum -ge 1151402936 ]] && [[ $obsnum -lt 1191580576 ]] ; then
    telescope="MWAHEX"
    basescale=2.0
    imsize=2000
    robust=-2.0
elif [[ $obsnum -ge 1191580576 ]] ; then
    telescope="MWALB"
    basescale=0.6
    imsize=8000
    robust=0.5
fi

# Set up channel-dependent options
chan="$(pyhead.py -p CENTCHAN ${metafits} | awk '{print $3}')"
bandwidth="$(pyhead.py -p BANDWDTH ${metafits} | awk '{print $3}')"
centfreq="$(pyhead.py -p FREQCENT ${metafits} | awk '{print $3}')"
chans="$(pyhead.py -p CHANNELS ${metafits} | awk '{print $3}' | sed 's/,/ /g')"
chans=($chans)

# Pixel scale
 # At least 4 pix per synth beam for each channel
scale=$(echo "$basescale / $chan" | bc -l)

# Naming convention for output files
lowfreq=$(echo "${centfreq}" "${bandwidth}" | awk '{printf("%00d\n",$1-($2/2.)+0.5)}')
highfreq=$(echo "$centfreq $bandwidth" | awk '{printf("%00d\n",$1+($2/2.)+0.5)}')
freqrange="${lowfreq}-${highfreq}"

# Calculate min uvw in metres
minuv=75
minuvm=$(echo "234 * $minuv / $chan" | bc -l)
# In wavelengths, maximum 128T baseline at 200MHz was 1667 lambda long
# 300/1.28 * 1667 = 390000
# Calculate max uvw in metres
maxuvm=$(echo "390000 / (${chan} + 11)" | bc -l)

# Found that multiscale cleaning recovers flux density in the extragalactic sky better than not, and doesn't add much to processing time
multiscale="-multiscale -mgain 0.85 -multiscale-gain 0.15"


# Checking if there is a gross sidelobe: 
get_mwa_pb_lobes.py ${metafits} -mS > ${obsnum}_beamlobes.txt
if [[ $(cat ${obsnum}_beamlobes.txt | wc -l ) -eq 1 ]]
then 
    ra_sidelobe=$(cat ${obsnum}_beamlobes.txt | awk '{print $2}')
    dec_sidelobe=$(cat ${obsnum}_beamlobes.txt | awk '{print $3}')
    fov_beam=$(cat ${obsnum}_beamlobes.txt | awk '{print $4}')

    radec_lobe=$(dd_hms_dms.py ${ra_sidelobe} ${dec_sidelobe} -d "hms")
    lobe_image_size=$(echo "1.2*${fov_beam}/${scale}" | bc -l)
    lobe_image_size=${lobe_image_size%.*}

else
    echo "No major sidelobe, good stuff"
    exit 0
fi

chgcentre "/tmp/slurm_wsclean/${SLURM_JOB_ID}/${obsnum}.ms" ${radec_lobe}

# Initial shallow clean to populate the model column 
# Set the pipefail so the test_fail does not test for tee
set -o pipefail
if [[ ! -e "${obsnum}_sidelobe-MFS-XX-image.fits" ]]
then
    taql alter table ${obsnum}.ms drop column MODEL_DATA
    wsclean \
            -abs-mem ${GXMEMORY} \
            -temp-dir /tmp/slurm_wsclean/${SLURM_JOB_ID}/ \
            $multiscale \
            -nmiter 1 \
            -niter 10000 \
            -auto-threshold 1 \
            -stop-negative \
            -auto-mask 3 \
            -name ${obsnum}_sidelobe \
            -size ${lobe_image_size} ${lobe_image_size} \
            -scale ${scale:0:8} \
            -weight briggs ${robust} \
            -pol XX,YY,XY,YX \
            -channels-out 4 \
            -join-polarizations \
            -data-column ${datacolumn} \
            "/tmp/slurm_wsclean/${SLURM_JOB_ID}/${obsnum}.ms" | tee wsclean.log
fi  

if [[ -e "${obsnum}_sidelobe-MFS-XX-image.fits" ]]
then
    taql update /tmp/slurm_wsclean/${SLURM_JOB_ID}/${obsnum}.ms set ${datacolumn}=${datacolumn}-MODEL_DATA
# Also updating the model column to remove the model of the sidelobe so its not accidentally added later 
    taql alter table /tmp/slurm_wsclean/${SLURM_JOB_ID}/${obsnum}.ms drop column MODEL_DATA
    rm -rf ${obsnum}.ms && cp -rf /tmp/slurm_wsclean/${SLURM_JOB_ID}/${obsnum}.ms ./
else 
    echo "There is no sidelobe image so I haven't subtracted anything because I'm not sure what's wrong" 
    rm -rf /tmp/slurm_wsclean/${SLURM_JOB_ID}/${obsnum}.ms
    exit 1
    
fi 


echo "Have subtracted the model column from the ${datacolumn}, now to change back to original pointing and cleanup"

coords=$(calc_pointing.py "${metafits}")
chgcentre \
        "${obsnum}.ms" \
        ${coords}
chgcentre \
        -zenith \
        -shiftback \
        "${obsnum}.ms"



track_task.py finish --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"